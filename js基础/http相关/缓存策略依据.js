// 首先 HTML 在这里属于包含其他文件的主文件，为保证当其内容发生修改时能及时更新，
// 应当将其设置为协商缓存，即为 cache-control 字段添加 no-cache 属性值；其次是图
// 片文件，因为网站对图片的修改基本都是更换修改，同时考虑到图片文件的数量及大小可能
// 对客户端缓存空间造成不小的开销，所以可采用强制缓存且过期时间不宜过长，故可设置
// cache-control 字段值为 max-age=86400。
// 接下来需要考虑的是样式表文件style.CsS，由于其属于文本文件，可能存在内容的不定
// 期修改，又想使用强制缓存来提高重用效率，故可以考虑在样式表文件的命名中增加文件指
// 纹或版本号（比如添加文件指纹后的样式表文件名变为了 style.51ad84f7.css），这样
// 当发生文件修改后，不同的文件便会有不同的文件指纹，即需要请求的文件 URL 不同了，
// 因此必然会发生对资源的重新请求。同时考虑到网络中浏览器与 CDN 等中间代理的缓存，
// 其过期时间可适当延长到一年，即 cache-control: max-age=31536000。

// 最后是 JavaScript 脚本文件，其可类似于样式表文件的设置，采取文件指纹和较长的过期
// 时间，如果 JavaScript 中包含了用户的私人信息而不想让中间代理缓存，则可为 cache-
// control 添加 private 属性值。
// 从这个缓存策略的示例中我们可以看出，对不同资源进行组合使用强制缓存、协商缓存及文
// 件指纹或版本号，可以做到一举多得：及时修改更新、较长缓存过期时间及控制所能进行缓
// 存的位置。


// js, css文件  强制缓存   因为协商缓存也会请求服务器
//  html文件    协商缓存    保证当其内容发生修改时能及时更新




1、拆分源码，分包加载
对大型的前端应用迭代开发来说，其代码量通常很大，如果发生修改的部分集中在几个重要
模块中，那么进行全量的代码更新显然会比较冗余，因此我们可以考虑在代码构建过程中，
按照模块拆分将其打包成多个单独的文件。这样在每次修改后的更新提取时，仅需拉取发生
修改的模块代码包，从而大大降低了需要下载的内容大小。
2、预估资源的缓存时效
根据不同资源的不同需求特点，规划相应的缓存更新时效，为强制缓存指定合适的max-
age 取值，为协商缓存提供验证更新的 ETag 实体标签。


3、控制中间代理的缓存
凡是会涉及用户隐私信息的尽量避免中间代理的缓存，如果对所有用户响应相同的资源，则
可以考虑让中间代理也进行缓存。。
牛梦珂 2264
4、避免网址的冗余
缓存是根据请求资源的 URL 进行的，不同的资源会有不同的URL，所以尽量不要将相同的
资源设置为不同的 URL。