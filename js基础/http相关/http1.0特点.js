//  http1.1 和 HTTP2 在线演示区别  https://http2.akamai.com/demo


// HTTP/1.0 的优点和缺点

// 优点：
// 1. 简单易用：协议设计简单，易于实现和理解。
// 2. 轻量级：适合早期网络环境和简单的应用场景。
// 3. 广泛支持：作为早期的 HTTP 协议版本，得到了广泛的支持。

// 缺点：
// 1. 无状态：每次请求都是独立的，无法记录上下文，导致需要重复传递相同的信息，增加了开销。
// 2. 短连接：每次请求都需要建立和断开 TCP 连接，增加了延迟和资源消耗。
// 3. 不支持 Host 头：无法在同一 IP 地址上托管多个虚拟主机，限制了扩展性。
// 4. 缓存机制简单：仅支持 Expires 字段，无法满足复杂的缓存需求。
// 5. 不支持加密：仅支持明文传输，存在安全隐患，无法满足现代安全需求。
// 6. 功能有限：缺乏分块传输等高级功能，无法高效处理大文件或流式数据。



HTTP/1.1 的优点和缺点

// 优点

// 1. 长连接（Keep-Alive）
// 默认使用长连接（persistent connection），允许在一个 TCP 连接上传输多个请求和响应，减少了频繁建立/关闭连接的开销。

// 2. 支持 Host 头
// 必须包含 Host 头部，可以在同一个 IP 地址上托管多个域名（虚拟主机）。

// 3. 新增缓存机制
// 支持 Cache-Control、ETag、If-Modified-Since 等缓存控制方式，细化了缓存策略。

// 4. 支持分块传输（Chunked Transfer Encoding）
// 对于不知道内容长度的响应（如流式数据），可以采用分块传输，提高灵活性。

// 5. 管线化（Pipelining）
// 客户端可以同时发送多个请求，不必等前一个响应返回再发送下一个请求（虽然浏览器通常没有充分利用这一点）。

// 6. 更多请求方法
// 除了 GET、POST、HEAD，还支持 PUT、DELETE、OPTIONS、TRACE 等，满足更复杂的 REST 接口需求。

// 7. 错误状态码更丰富
// 新增了更多 HTTP 状态码，提高了对错误情况的描述能力。


// 缺点

1. 队头阻塞（Head-of-Line Blocking）
虽然支持管线化，但响应仍必须顺序返回（先请求的必须先响应），造成“队头阻塞”问题 ➜ 后面的请求被前面的慢请求阻塞。

2. 多连接并发效率低
浏览器为规避队头阻塞，通常会对同一域名开启 6~8 个连接，但这会增加服务器负载和带宽压力。

3. 请求和响应必须完整传输
无法对数据进行多路复用，请求之间不能共享连接的数据通道。

4. 加密开销大
每个连接都需要独立进行 TLS 握手（如果使用 HTTPS），耗时大、资源多。

5. 传输数据格式不高效
请求和响应都是基于文本的，不能压缩头部，每次请求都重复发送大量相同的头部信息（如 Cookie、User-Agent）。



