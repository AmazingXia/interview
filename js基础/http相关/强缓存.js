// 概念：
// 强缓存指的是浏览器可以直接使用本地缓存的资源，而无需向服务器发送请求。即 命中强缓存时，浏览器不会向服务器发送请求，直接从本地缓存中读取资源。

// 实现方式（HTTP 响应头）：

// Expires（HTTP/1.0，绝对时间）
// 指定资源的到期时间，格式类似 Expires: Wed, 21 Oct 2025 07:28:00 GMT。
// 由于是绝对时间，会受到本地时间偏差的影响，因此不太可靠。
// Cache-Control（HTTP/1.1，相对时间）
// 比 Expires 更常用，可以指定缓存的最大存活时间，例如：
// http
// 复制
// 编辑
// Cache-Control: max-age=3600  # 表示缓存 3600 秒（1 小时）
// 其他常见指令：
// no-cache：不使用强缓存，但可以使用协商缓存。
// no-store：完全不使用缓存，每次都请求服务器。
// public：所有用户都可以缓存。
// private：仅允许当前用户缓存，代理服务器不能缓存。
// 流程：

// 浏览器请求资源，服务器返回带有 Cache-Control 或 Expires 的响应头。
// 在 max-age 时间内，浏览器不会向服务器发送请求，而是直接从缓存中读取资源。
// 特点：

// 命中强缓存时，不会发起请求，直接使用本地缓存，速度最快。
// 但如果缓存过期，浏览器需要重新请求资源



// no-cache 和 no-store
// 设置 no-cache 并非像字面上的意思不使用
// 缓存，其表示为强制进行协商缓存（后面会
// 说），即对于每次发起的请求都不会再去判
// 断强制缓存是否过期，而是直接与服务器协
// 商来验证缓存的有效性，若缓存未过期，则
// 会使用本地缓存。

// 设置 no-store 则表示禁止使用任何缓存策略，
// 客户端的每次请求都需要服务器端给予全新的响应。
// no-cache 和 no-store 是两个互斥的属性值，不能同时设置。


| 指令                 | 含义说明                                      |
| ------------------ | ----------------------------------------- |
| `public`           | 可以被任何中间缓存服务器缓存（如 CDN、代理）                  |
| `private`          | 只能被终端浏览器缓存，不能被共享缓存（如代理服务器）缓存              |

| `no-cache`         | 不使用缓存，**每次都要向服务器验证**资源是否有效                |
| `no-store`         | 不允许缓存（比如银行页面、密码页面）                        |

| `max-age=秒数`       | 指定资源可以缓存的最大秒数，超过就视为过期                     |
| `s-maxage=秒数`      | 专门给共享缓存（如 CDN）使用的 max-age，优先级高于 `max-age` |

| `must-revalidate`  | 一旦缓存过期（或 max-age 到期），必须重新验证后才能使用          |
| `proxy-revalidate` | 和 `must-revalidate` 类似，但只对代理服务器有效         |
| `immutable`        | 表示资源永远不会变动（即使用户刷新页面也不检查）                  |


// Cache-Control: public, max-age=3600
// 👉 浏览器或 CDN 都可以缓存，缓存有效期为 3600 秒（1 小时）。