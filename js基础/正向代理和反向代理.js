
// 但它们的目的、服务对象、位置和使用场景完全不同。我们来详细对比讲解：



// 一、定义对比

// |          | 正向代理（Forward Proxy）     | 反向代理（Reverse Proxy）     |
// | -------- | ----------------------- | ----------------------- |
// | **服务对象** | 客户端（Client）             | 服务端（Server）             |
// | **目标隐藏** | 客户端隐藏真实身份               | 服务端隐藏真实结构               |
// | **代理方向** | 客户端 ➜ 代理 ➜ 服务端          | 客户端 ➜ 代理 ➜ 多个服务端        |
// | **典型用途** | 科学上网、突破访问限制             | 负载均衡、跨域、隐藏服务、HTTPS 协议卸载 |
// | **控制权**  | 客户端控制                   | 服务端控制                   |
// | **常见实现** | Shadowsocks, VPN, Squid | Nginx, Apache, HAProxy  |


// 🌍 二、正向代理（Forward Proxy）
// ✅ 概念
// 正向代理是客户端设置的代理服务器，客户端通过它访问原本无法访问的资源。

// 就像你把请求交给一个“中间人”，让它替你去网站取东西。

// 🎯 应用场景
// 翻墙（访问被墙的网站）

// 访问企业内部网络资源

// 客户端隐藏真实 IP

// 对客户端访问进行审计、过滤





// 🏰 三、反向代理（Reverse Proxy）
// ✅ 概念
// 反向代理是服务器端部署的代理，它接收所有客户端请求，然后把请求分发给真正的后端服务器。

// 客户端以为自己请求的是 A，其实是 A 把请求偷偷转给了 B、C、D。

// 🎯 应用场景
// 实现负载均衡（Nginx/HAProxy）

// 实现动静分离

// 实现跨域访问（常用于前后端分离）

// 加密终端（HTTPS 卸载）

// 缓存和加速访问（CDN）

// 🔧 Nginx 示例（反向代理接口）：
server {
  listen 80;
  server_name api.example.com;

  location / {
      proxy_pass http://localhost:3000;
  }
}


// 📌 四、直观类比
// | 类比角色 | 正向代理       | 反向代理              |
// | ---- | ---------- | ----------------- |
// | 类比形象 | 帮你买外卖的“代购” | 餐厅前台，根据点单决定哪个厨师做菜 |
// | 谁设置它 | 你（客户端）     | 餐厅老板（服务器端）        |
// | 谁被隐藏 | 你（客户端）     | 厨师（真实后端服务）        |


// ✅ 总结对比表
// | 特征       | 正向代理                  | 反向代理                 |
// | -------- | --------------------- | -------------------- |
// | 服务对象     | 客户端                   | 服务端                  |
// | 请求发起者    | 客户端                   | 客户端                  |
// | 代理部署位置   | 客户端网络外部               | 服务端前端                |
// | 使用目的     | 访问被限制的资源              | 提高可用性、隐藏后端、负载均衡      |
// | 客户端是否需配置 | 是                     | 否（对用户透明）             |
// | 常见技术     | VPN、Shadowsocks、Squid | Nginx、Apache、HAProxy |
